model: models.dgns.CGMM.CGMM
experiment: incremental
higher_results_are_better: True
dataset-getter: datasets.provider.IncrementalDataProvider
log_every: 1
num_dataloader_workers: 0
pin_memory: False
device: cpu
grid:
  layer_config:
    checkpoint: False  # I have not implemented saving and loading for CGMM yet
    batch_size:
      - 100000  # We could accumulate likelihood in the CGMMLoss class. For now, use the full batch.
    shuffle:
      - True
    previous_layers_to_use: "1"  # multiple layers: "1,2,4"
    concatenate_on_axis: 1  # must be > 0
    max_layers:
      - 2
    A:
      - 1
    C:
      - 5
    node_type:
      - discrete
    unibigram:
      - False
    aggregation:
      - sum
    infer_with_posterior:
      - True
    epochs:
      - 10
    self_arc:
      - False
    wrapper:
      - training.engine.IncrementalTrainingEngine
    loss:
      - training.callback.loss.CGMMLoss
    optimizer:
      - training.callback.optimizer.CGMMOptimizer
    arbitrary_function_config:  # Define the information for the arbitrary function
      checkpoint: True
      log_every: 1
      num_dataloader_workers: 0  # > 0 only with --debug option and GPU device
      pin_memory: False  # True only with --debug option and GPU device
      device: cpu
      batch_size:
        - 200
      epochs:
        - 10
      hidden_units:
        - 32
      optimizer:
        -
          class_name: training.callback.optimizer.Optimizer
          args:
            optimizer_class_name: torch.optim.Adam
            lr:
              - 0.001
            weight_decay: 0.001
      loss:
        #- training.callback.loss.MeanAverageErrorLoss
      - training.callback.loss.MulticlassClassificationLoss
      scorer:
        #- training.callback.score.RSquareScore
        - training.callback.score.MulticlassAccuracyScore
      predictor:
        - models.predictors.GraphPredictor.CGMMGraphPredictor
      wrapper:
        - training.engine.TrainingEngine
      early_stopper:
        -
          class_name:
            - training.callback.early_stopping.PatienceEarlyStopper
          args:
            patience:
              - 2000
            monitor: validation_Multiclass Accuracy # (train_,validation_)[name_of_the_scorer_or_loss_to_monitor]
            mode: max
            checkpoint: False
      shuffle:
        - True
      plotter:
        - training.callback.plotter.Plotter
