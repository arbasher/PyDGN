model: model.dgn.cgmm.CGMM
experiment: experiment.cgmm_classifier_task.ClassifierCGMMTask
higher_results_are_better: True
dataset_getter: data.provider.IncrementalDataProvider
log_every: 1
num_dataloader_workers: 2  # > 0 only with --debug option and GPU device
pin_memory: True  # True only with --debug option and GPU device
device: cpu
seed: 42
grid:
  layer_config:
    embeddings_folder: [path where to load embeddings from]
    checkpoint: True
    batch_size:
      - 256
    shuffle:
      - False
    previous_layers_to_use:
      - "1"  # multiple layers: "1,2,4"
    concatenate_on_axis: 1  # must be > 0
    max_layers:
      - 20
    layers:
      - 20
    A:
      - 1
    C:
      - 20
    predictor:
      - model.predictor.node_predictor.UnsupervisedProbabilisticNodeReadout
    emission:
      - model.distribution.emission.IndependentMultivariateBernoulliEmission
    unibigram:
      - True  # the experiment above will generate embeddings with both unigrams and unibigram representation
    aggregation:
      - sum
      - mean
    infer_with_posterior:
      - True
      - False
    epochs:
      - 10
    wrapper:
      - training.engine.IncrementalTrainingEngine
    loss:
      - training.callback.loss.CGMMLoss
    optimizer:
      - training.callback.optimizer.CGMMOptimizer
    scorer:
      - class_name: training.callback.score.MultiScore
        args:
          # used at model selection time. Should be the one on which to perform early stopping
          main_scorer: training.callback.score.CGMMCompleteLikelihoodScore
          true_likelihood: training.callback.score.CGMMTrueLikelihoodScore
    plotter:
      - training.callback.plotter.Plotter
    arbitrary_function_config: # Define the information for the arbitrary function
        shuffle: True
        batch_size:
          - 256
        checkpoint: True
        log_every: 1
        num_dataloader_workers: 0  # > 0 only with --debug option and GPU device
        pin_memory: False  # True only with --debug option and GPU device
        device: cpu
        epochs:
          - 10000
        hidden_units:
          - 128
          - 256
        optimizer:
          - class_name: training.callback.optimizer.Optimizer
            args:
              optimizer_class_name: torch.optim.Adam
              lr:
                - 0.001
              weight_decay:
                - 0.
                - 0.0005
        loss:
          - training.callback.loss.MeanAverageErrorLoss
        scorer:
          - training.callback.score.RSquareScore
        predictor:
          - [your graph predictor]
        readout:
          - sum
        wrapper:
          - training.engine.TrainingEngine
        early_stopper:
          - class_name:
              - training.callback.early_stopping.PatienceEarlyStopper
            args:
              patience:
                - 1000
              monitor: validation_R2 Determination Coefficient # (train_,validation_)[name_of_the_scorer_or_loss_to_monitor]
              mode: max
              checkpoint: True
        plotter:
          - training.callback.plotter.Plotter
