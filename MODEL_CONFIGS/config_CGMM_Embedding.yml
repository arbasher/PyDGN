model: pydgn.model.dgn.cgmm.CGMM
experiment: pydgn.experiment.cgmm_embedding_task.EmbeddingCGMMTask
higher_results_are_better: True
dataset_getter: pydgn.data.provider.IncrementalDataProvider
data_loader: torch_geometric.loader.DataLoader
log_every: 1
num_dataloader_workers: 2  # > 0 only with --debug option and GPU device
pin_memory: True  # True only with --debug option and GPU device
device: cuda
seed: 42
grid:
  layer_config:
    embeddings_folder: [ path where to save embeddings ]
    checkpoint: True
    batch_size:
      - 256
    shuffle:
      - False
    previous_layers_to_use:
      - "1"  # multiple layers: "1,2,4"
    concatenate_on_axis: 1  # must be > 0
    max_layers:
      - 20
    A:
      - 1
    C:
      - 20
    predictor:
      - pydgn.model.predictor.node_predictor.UnsupervisedProbabilisticNodeReadout
    emission:
      - pydgn.model.distribution.emission.IndependentMultivariateBernoulliEmission
    unibigram:
      - True  # the experiment above will generate embeddings with both unigrams and unibigram representation
    aggregation:
      - sum
      - mean
    infer_with_posterior:
      - True
      - False
    epochs:
      - 10
    wrapper:
      - pydgn.training.engine.IncrementalTrainingEngine
    loss:
      - pydgn.training.callback.loss.CGMMLoss
    optimizer:
      - pydgn.training.callback.optimizer.CGMMOptimizer
    scorer:
      - class_name: pydgn.training.callback.score.MultiScore
        args:
          # used at model selection time. Should be the one on which to perform early stopping
          main_scorer: pydgn.training.callback.score.CGMMCompleteLikelihoodScore
          true_likelihood: pydgn.training.callback.score.CGMMTrueLikelihoodScore
    plotter:
      - pydgn.training.callback.plotter.Plotter
