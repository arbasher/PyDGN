# Dataset and Splits
data_root: DATA
dataset_class: pydgn.data.dataset.ChickenpoxDatasetInterface
dataset_name:  chickenpox
data_splits_file:  examples/DATA_SPLITS/chickenpox/chickenpox_outer1_inner3.splits


# Hardware
device:  cpu
max_cpus:  4
max_gpus: 0
gpus_per_task:  1


# Data Loading
dataset_getter: pydgn.data.provider.SingleGraphSequenceDataProvider
data_loader:
  class_name: torch.utils.data.DataLoader
  args:
    num_workers : 0
    pin_memory: False


# Reproducibility
seed: 42


# Experiment
result_folder: RESULTS
exp_name: supervised_grid_search_toy_temporal
experiment: pydgn.experiment.supervised_task.SupervisedTask
higher_results_are_better: True
evaluate_every: 1
final_training_runs: 3


grid:
  supervised_config:
    model: pydgn.model.dgn.toy_dgn.ToyDGNTemporal
    checkpoint: True
    shuffle: True
    batch_size: 1  # one timestep at a time in the batch
    epochs: 100

    # Model specific arguments #

    # ------------------------ #

    # Optimizer (with an example - 3 possible alternatives)
    optimizer:
      - class_name: pydgn.training.callback.optimizer.Optimizer
        args:
          optimizer_class_name: torch.optim.Adam
          lr:
            - 0.0001
          weight_decay: 0.

    # Scheduler (optional)
    scheduler: null

    # Loss metric (with an example of Additive Loss)
    loss:
      - pydgn.training.callback.metric.MeanSquareError
      - class_name: pydgn.training.callback.metric.AdditiveLoss
        args:
          loss_1: pydgn.training.callback.metric.MeanSquareError
          loss_2: pydgn.training.callback.metric.MeanAverageError

    # Score metric (with an example of Multi Score)
    scorer:
      - class_name: pydgn.training.callback.metric.MultiScore
        args:
          main_scorer: pydgn.training.callback.metric.MeanSquareError
          my_second_metric: pydgn.training.callback.metric.MeanAverageError

    # Readout (optional)
    readout: pydgn.model.readout.node_readout.LinearNodeReadout

    # Training engine
    engine:
      - class_name: pydgn.training.engine.GraphSequenceTrainingEngine
        args:
          engine_callback: pydgn.training.callback.engine_callback.TemporalEngineCallback

    # Gradient clipper (optional)
    gradient_clipper: null

    # Early stopper (optional, with an example of "patience" early stopping on the validation score)
    early_stopper:
      - class_name:
          - pydgn.training.callback.early_stopping.PatienceEarlyStopper
        args:
          patience:
            - 10
          # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
          monitor: validation_main_score
          mode: min  # is best the `max` or the `min` value we are monitoring?
          checkpoint: True  # store the best checkpoint

    # Plotter of metrics
    plotter: pydgn.training.callback.plotter.Plotter